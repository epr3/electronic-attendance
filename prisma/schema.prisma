generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Approval {
  id          String          @id @default(uuid())
  eventId     String          @unique @map("event_id")
  value       String
  status      APPROVAL_STATUS
  requestorId String          @map("requestor_id")
  event       Event           @relation(fields: [eventId], references: [id], onDelete: Cascade)
  requestor   User            @relation(fields: [requestorId], references: [id], onDelete: Cascade)

  @@index([requestorId], map: "approvals_requestor_id_fkey")
  @@map("approvals")
}

model Grade {
  id          String  @id @default(uuid())
  value       String
  eventId     String  @unique @map("event_id")
  description String?
  event       Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("grades")
}

model AbsenceDoc {
  id        String  @id @default(uuid())
  absenceId String  @map("absence_id")
  imageUrl  String? @map("image_url")
  absence   Absence @relation(fields: [absenceId], references: [id], onDelete: Cascade)

  @@index([absenceId], map: "absence_docs_absence_id_fkey")
  @@map("absence_docs")
}

model Absence {
  id          String       @id @default(uuid())
  accounted   Boolean      @default(false)
  eventId     String       @unique @map("event_id")
  absenceType ABSENCE_TYPE @map("absence_type")
  AbsenceDoc  AbsenceDoc[]
  event       Event        @relation(fields: [eventId], references: [id])

  @@map("absences")
}

model Event {
  id        String              @id @default(uuid())
  studentId String              @map("student_id")
  createdAt DateTime            @map("created_at")
  eventType EVENT_TYPE          @default(GRADE) @map("event_type")
  subjectId String              @map("subject_id")
  absences  Absence?
  approval  Approval?
  student   User                @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject   SubjectTeacherClass @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  grades    Grade?

  @@index([studentId], map: "events_student_id_fkey")
  @@index([subjectId], map: "events_subject_id_fkey")
  @@map("events")
}

model Class {
  id            String                @id @default(uuid())
  title         String
  headTeacherId String                @unique @map("head_teacher_id")
  isActive      Boolean               @map("is_active")
  schoolId      String                @map("school_id")
  schoolYearId  String                @map("school_year_id")
  headTeacher   User                  @relation("HeadTeacher", fields: [headTeacherId], references: [id])
  school        School                @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolYear    SchoolYear            @relation(fields: [schoolYearId], references: [id])
  students      ClassStudent[]
  teachers      SubjectTeacherClass[]

  @@index([schoolId], map: "classes_school_id_fkey")
  @@index([schoolYearId], map: "classes_school_year_id_fkey")
  @@map("classes")
}

model Subject {
  id       String                @id @default(uuid())
  name     String
  schoolId String                @map("school_id")
  school   School                @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  teachers SubjectTeacherClass[]

  @@index([schoolId], map: "subjects_school_id_fkey")
  @@map("subjects")
}

model SubjectStudent {
  studentId String              @unique @map("student_id")
  subjectId String              @map("subject_id")
  student   User                @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject   SubjectTeacherClass @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@id([studentId, subjectId])
  @@index([subjectId], map: "subjects_students_subject_id_fkey")
  @@map("subjects_students")
}

model SubjectTeacherClass {
  id           String           @id @default(uuid())
  calendarRule String           @map("calendar_rule")
  startTime    String           @map("start_time")
  endTime      String           @map("end_time")
  classId      String           @map("class_id")
  subjectId    String           @map("subject_id")
  teacherId    String           @map("teacher_id")
  event        Event[]
  students     SubjectStudent[]
  class        Class            @relation(fields: [classId], references: [id], onDelete: Cascade)
  subject      Subject          @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  teacher      User             @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@index([classId], map: "subjects_teachers_classes_class_id_fkey")
  @@index([subjectId], map: "subjects_teachers_classes_subject_id_fkey")
  @@index([teacherId], map: "subjects_teachers_classes_teacher_id_fkey")
  @@map("subjects_teachers_classes")
}

model ClassStudent {
  classId   String @map("class_id")
  studentId String @map("student_id")
  class     Class  @relation(fields: [classId], references: [id], onDelete: Cascade)
  student   User   @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@id([studentId, classId])
  @@index([classId], map: "classes_students_class_id_fkey")
  @@map("classes_students")
}

model Token {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now()) @map("created_at")
  email     String     @unique
  tokenType TOKEN_TYPE @map("token_type")
  user      User       @relation(fields: [email], references: [email], onDelete: Cascade)

  @@map("tokens")
}

model School {
  id       String       @id @default(uuid())
  name     String
  acronym  String
  logo     String?
  classes  Class[]
  years    SchoolYear[]
  users    SchoolUser[]
  subjects Subject[]

  @@map("schools")
}

model ParentStudent {
  studentId String @unique @map("student_id")
  parentId  String @unique @map("parent_id")
  parent    User   @relation("Parents", fields: [parentId], references: [id], onDelete: Cascade)
  student   User   @relation("Students", fields: [studentId], references: [id], onDelete: Cascade)

  @@id([studentId, parentId])
  @@map("parents_students")
}

model SchoolYear {
  id             String               @id @default(uuid())
  schoolDateRule String               @map("school_date_rule")
  schoolId       String               @map("school_id")
  classes        Class[]
  holidays       SchoolYearHolidays[]
  school         School               @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@index([schoolId], map: "school_years_school_id_fkey")
  @@map("school_years")
}

model SchoolYearHolidays {
  id              String     @id @default(uuid())
  name            String
  holidayDateRule String     @map("holiday_date_rule")
  schoolYearId    String     @map("school_year_id")
  schoolYear      SchoolYear @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)

  @@index([schoolYearId], map: "school_year_holidays_school_year_id_fkey")
  @@map("school_year_holidays")
}

model UserPassport {
  id           String        @id @default(uuid())
  password     String?
  userId       String        @map("user_id")
  passportType PASSPORT_TYPE @map("passport_type")
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "user_passports_user_id_fkey")
  @@map("user_passports")
}

model SchoolUser {
  schoolId String @map("school_id")
  userId   String @map("user_id")
  role     ROLE
  school   School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([schoolId, userId])
  @@index([userId], map: "schools_users_user_id_fkey")
  @@map("schools_users")
}

model User {
  id               String                @id @default(uuid())
  firstName        String                @map("first_name")
  lastName         String                @map("last_name")
  email            String                @unique
  verifiedAt       DateTime?             @map("verified_at")
  telephone        String
  approvals        Approval[]
  headTeacherClass Class?                @relation("HeadTeacher")
  classes          ClassStudent[]
  events           Event[]
  parent           ParentStudent?        @relation("Parents")
  student          ParentStudent?        @relation("Students")
  school           SchoolUser[]
  subject          SubjectStudent?
  subjects         SubjectTeacherClass[]
  tokens           Token?
  userPassports    UserPassport[]

  @@map("users")
}

enum PASSPORT_TYPE {
  PASSWORD
  GOOGLE
}

enum TOKEN_TYPE {
  VALIDATION
  RESET_PASSWORD
}

enum ROLE {
  SUPERADMIN
  DIRECTOR
  ADMIN
  TEACHER
  STUDENT
  PARENT
}

enum ABSENCE_TYPE {
  MEDICAL
  PARENT
  TEACHER
}

enum EVENT_TYPE {
  ABSENCE
  GRADE
}

enum APPROVAL_STATUS {
  PENDING
  APPROVED
  DENIED
}
